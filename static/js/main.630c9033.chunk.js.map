{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","components/reset1.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","className","error","Weather","city","country","Math","round","temp","temp_min","temp_max","pressure","sunrise","sunset","humidity","visibility","wind","clouds","Reset1","onClick","reset111","API_KEY","App","state","undefined","gettingWeather","e","a","console","log","preventDefault","target","elements","value","fetch","api_url","json","data","sunset1","sys","sunset2","Date","sunset3","toLocaleTimeString","sunrise1","sunrise2","sunrise3","setState","main","speed","all","clickreset1","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.630c9033.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n\r\n<div>\r\n\r\n<h2>Погода <br/> от Ивана Родина</h2>\r\n\r\n<p>Узнайте погоду в вашем городе</p>\r\n\r\n</div>\r\n\r\n);\r\n\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = (props)  => (\r\n\r\n<form onSubmit={props.weatherMethod}>\r\n\r\n<input type=\"text\" name=\"city\" placeholder=\"Введите город\" />\r\n\r\n<p className=\"error\">{props.error} </p> {/* передал пропсы из АПП !!! */}\r\n\r\n<button>Получить погоду</button>\r\n\r\n</form>\r\n\r\n);\r\n\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = (props) => (\r\n\r\n<div className=\"infoWeath\">\r\n\r\n{ props.city &&\r\n\r\n<div>\r\n\r\n<p><strong>Местоположение:</strong> {props.city}, {props.country} </p>\r\n\r\n<p><strong>Температура на данный момент:</strong>  {Math.round(props.temp)}°C</p>\r\n\r\n<p><strong>Мин./Макс. температура:</strong>  {Math.round(props.temp_min)}/{Math.round(props.temp_max)}°C</p>\r\n\r\n<p><strong>Давление:</strong> {props.pressure} hPa</p>\r\n\r\n<p><strong>Восход солнца:</strong>  {props.sunrise}</p>\r\n\r\n<p><strong>Заход солнца:</strong>  {props.sunset}</p>\r\n\r\n<p><strong>Влажность:</strong> {props.humidity}%</p>\r\n\r\n<p><strong>Видимость:</strong> {props.visibility/1000} км</p>\r\n\r\n<p><strong>Ветер:</strong> {props.wind} км/ч</p>\r\n\r\n<p><strong>Облачность:</strong> {props.clouds}%</p>\r\n\r\n</div>\r\n\r\n}\r\n\r\n</div>\r\n\r\n);\r\n\r\nexport default Weather;","import React from \"react\"; //этот компонент отвечает за кнопку сброс\r\n\r\nconst Reset1 = (props) => (\r\n\r\n\r\n    <button onClick={props.reset111}>Сбросить прогноз</button>     \r\n\r\n);\r\n\r\n\r\nexport default Reset1;","import React from \"react\";\nimport Info from \"./components/info\"\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\nimport Reset1 from \"./components/reset1\";\n\nconst API_KEY = \"d5ed01a09a03b913e5cc79871b8c2a5a\"; {/* http://api.openweathermap.org/data/2.5/weather?q=Kiev,ua&appid=d5ed01a09a03b913e5cc79871b8c2a5a&units=metric */}\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    temp_min: undefined,\n    temp_max: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    humidity: undefined,\n    visibility: undefined,\n    wind: undefined,\n    clouds: undefined,\n    sunrise: undefined,\n\n    error: undefined\n  }\n\n  gettingWeather = async (e) => {\n\n    console.log('gettingWeather - 1 СРАБОТАЛ');\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    if(city) {\n\n      const api_url = await\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n\n      //конвертировал секунды из Апи в нормальный формат времени\n\n      let sunset1 = data.sys.sunset;\n      let sunset2 = new Date(sunset1*1000);\n      let sunset3 = sunset2.toLocaleTimeString();\n\n      let sunrise1 = data.sys.sunrise;\n      let sunrise2 = new Date(sunrise1*1000);\n      let sunrise3 = sunrise2.toLocaleTimeString();           \n\n    this.setState({\n\n      temp: data.main.temp,\n      temp_min: data.main.temp_min,\n      temp_max: data.main.temp_max,\n      city: data.name,\n      country: data.sys.country,\n      pressure: data.main.pressure,\n      sunset: sunset3,\n      humidity: data.main.humidity,\n      visibility: data.visibility,\n      wind: data.wind.speed,\n      clouds: data.clouds.all,\n      sunrise: sunrise3,     \n\n      error: undefined\n\n    });\n\n  }\n  \n    else {\n\n      this.setState({\n  \n        temp: undefined,\n        temp_min: undefined,\n        temp_max: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        humidity: undefined,\n        visibility: undefined,\n        wind: undefined,\n        clouds: undefined,\n        sunrise: undefined,\n        \n  \n        error: \"Введите название города\"\n  \n        });\n  \n      }\n    \n}\n\nclickreset1 = () => { //вот этот обработчик отвечает за сброс данных из состояния\n \n   console.log('сброс - проверка');\n \n   this.setState({\n \n     temp: undefined,\n     temp_min: undefined,\n     temp_max: undefined,\n     city: undefined,\n     country: undefined,\n     pressure: undefined,\n     sunset: undefined,\n     humidity: undefined,\n     visibility: undefined,\n     wind: undefined,\n     clouds: undefined,\n     sunrise: undefined,     \n \n     error: \"Сброс выполнен\"\n \n     });\n \n }; \n\n\n\n\n\n\n\n\nrender() { \n\nreturn (\n\n<div className=\"wrapper\">\n\n<div className=\"main\">\n\n<div className=\"container\">\n\n<div className=\"row\"> \n\n<div className=\"col-sm-5 info\">\n\n<Info />\n\n</div>\n\n<div className=\"col-sm-7 form\">\n\n<Form \n\nweatherMethod={this.gettingWeather}\n\nerror={this.state.error} //отправил в компонент ФОРМ, как пропс от еррор !!! иначе не передается и не отражается !!!\n\n/>\n\n<Weather\n\ntemp={this.state.temp}\ntemp_min = {this.state.temp_min}\ntemp_max = {this.state.temp_max}\ncity={this.state.city}\ncountry={this.state.country}\npressure={this.state.pressure}\nsunset={this.state.sunset}\nhumidity={this.state.humidity}\nvisibility={this.state.visibility}\nwind={this.state.wind}\nclouds = {this.state.clouds}\nsunrise = {this.state.sunrise}\n\nerror={this.state.error}\n\n/>\n\n<Reset1 reset111={this.clickreset1} />\n\n</div>\n\n\n\n</div>\n\n\n\n</div>\n\n</div>\n\n</div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}